function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
n = size(Theta2,1);
a2= ones(m,size(Theta1,1)+1);
a3= ones(m,size(Theta2,1)); 
X = [ones(m, 1) X];
Y=zeros(m,n);
Dgrad1 = zeros(size(Theta1));
Dgrad2 = zeros(size(Theta2));
Rtheta1 = zeros(size(Theta1));
Rtheta2 = zeros(size(Theta2));
for i=1:m
	Y(i,y(i))=1;
end;
size(Theta2);
for i=1:m
	a1=X(i,:);
	z1=Theta1*a1';
	a2(i,[2:end])=sigmoid(z1');
	z2=Theta2*a2(i,:)';
	a3(i,:)=sigmoid(z2');
	delta3=a3(i,:)-Y(i,:);
	delta2=(Theta2'*delta3').*a2(i,:)'.*(1-a2(i,:)');
	Dgrad1= Dgrad1+(delta2([2:end],:)*X(i,:));
	Dgrad2= Dgrad2+(delta3'*a2(i,:));
end;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

Rtheta1(:,[2:end]) = (lambda)*(Theta1(:,[2:end]));
Rtheta2(:,[2:end]) = (lambda)*(Theta2(:,[2:end]));
Theta1_grad=(1/m)*(Dgrad1+Rtheta1);
Theta2_grad=(1/m)*(Dgrad2+Rtheta2);         
% You need to return the following variables correctly
%a1=X;
%z1=a1*Theta1';
%a2=sigmoid(z1);
%a2=[ones(m,1) a2];
%z2=a2*Theta2';
%a3=sigmoid(z2);
%h=a3; 
cost_function=0;
for i=1:m
	cost_function=cost_function+sum(Y(i,:).*log(a3(i,:))+(1-Y(i,:)).*log(1-a3(i,:)));
end;
R=0;
S1=0;
S2=0;
for i=1:size(Theta1,1)
	S1=S1+sum(Theta1(i,[2:end]).^2);
end;
for i=1:size(Theta2,1)
	S2=S2+sum(Theta2(i,[2:end]).^2);
end;
R=(lambda/(2*m))*(S1+S2);
J = 0;
J = (-(1/m)*cost_function)+R;

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%



















% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
